// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0 effective-5.10 (swiftlang-6.0.0.9.10 clang-1600.0.26.2)
// swift-module-flags: -target arm64-apple-ios18.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -enable-experimental-feature OpaqueTypeErasure -enable-bare-slash-regex -module-name PracticeFrameWork
import DeveloperToolsSupport
import Foundation
@_exported import PracticeFrameWork
import Swift
import SwiftUI
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
open class CurrencyTool {
  public enum Currency {
    case USD
    case EUR
    case JPY
    case NTD
    public static func == (a: PracticeFrameWork.CurrencyTool.Currency, b: PracticeFrameWork.CurrencyTool.Currency) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum CurrencyError : Swift.Error {
    case valueLessThanZero
    public static func == (a: PracticeFrameWork.CurrencyTool.CurrencyError, b: PracticeFrameWork.CurrencyTool.CurrencyError) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  open func swapCurrency(NTD value: Swift.Double, currency: PracticeFrameWork.CurrencyTool.Currency) throws -> Swift.Double
  public init()
  @objc deinit
}
extension PracticeFrameWork.CurrencyTool.Currency : Swift.Equatable {}
extension PracticeFrameWork.CurrencyTool.Currency : Swift.Hashable {}
extension PracticeFrameWork.CurrencyTool.CurrencyError : Swift.Equatable {}
extension PracticeFrameWork.CurrencyTool.CurrencyError : Swift.Hashable {}
